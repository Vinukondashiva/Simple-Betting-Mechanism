// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract Betting {
uint256 public betAmount;
address[] public participants;
mapping(address => bool) public hasBet;
address public owner;
event BetPlaced(address indexed participant);
event WinnerChosen(address indexed winner, uint256 amount);
constructor(uint256 _betAmount) {
require(_betAmount > 0, "Bet amount must be greater than zero");
betAmount = _betAmount;
owner = msg.sender; // Set the deployer as the initial owner
}
function placeBet() external payable {
require(msg.value == betAmount, "Incorrect bet amount");
require(!hasBet[msg.sender], "Address has already placed a bet");
participants.push(msg.sender);
hasBet[msg.sender] = true;
emit BetPlaced(msg.sender);
}
function endBettingAndPickWinner() external onlyOwner {
require(participants.length > 0, "No participants to pick from");
Select a pseudo-random winner
uint256 randomIndex = uint256(
keccak256(abi.encodePacked(block.timestamp, block.difficulty, participants))
) % participants.length;
address winner = participants[randomIndex];
// Transfer the entire contract balance to the winner
uint256 prizeAmount = address(this).balance;
payable(winner).transfer(prizeAmount);
emit WinnerChosen(winner, prizeAmount);
}
}
